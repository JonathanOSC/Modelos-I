# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SQJ2L8buqfAtIVyAw74v7cvkdk9GE0oC
"""

class Engine:

    """This class represents the engine propeties of a vechicle"""


    def __init__(self, name: str, type_of_engine: str, potency: int, weight: int):
        #Attributes of the class

        self.name = name
        self.type_of_engine = type_of_engine
        self.potency = potency
        self.weight = weight

class Vehicle(Engine):


    """This class represents the structure of a vehicle"""

                #Constructor -> add name, typeof, potency, weig -> eliminate engine

    def __init__(self, engine: Engine, chasis: str, model: str, gas_consumption: float, year: int):
        #super().__init__(name, type_of_engine, potency, weight)
        self.engine = engine
        self.chasis = chasis
        self.model = model
        self.gas_consumption = gas_consumption
        self.year = year

    def gas_consumption(self):

        #A method to calculate the gas consumption of a vehicle

        if self.chasis == "A":
            chasis_type = 0.3
        else:
            chasis_type = 0.5

        self.gas_consumption = ( 1.1*self.engine.potency) + (0.2*self.engine.weight) - (chasis_type)
        return self.gas_consumption

class Car(Vehicle):

    def __init__(self, name: str,  type_of_engine: str, potency: int, weight: int, engine: Engine, chasis: str, model: str, gas_consumption: float, year: int, seats: int):
        super().__init__(engine, chasis, model, gas_consumption, year)
        self.seats = seats


class Truck(Vehicle):

    def __init__(self, name: str,  type_of_engine: str, potency: int, weight: int, engine: Engine, chasis: str, model: str, gas_consumption: float, year: int, axles: int, maximun_weight: int):
        super().__init__(engine, chasis, model, gas_consumption, year)
        self.axles = axles
        self.maximun_weight = maximun_weight


class Yacht(Vehicle):

    def __init__(self, name: str,  type_of_engine: str, potency: int, weight: int, engine: Engine, chasis: str, model: str, gas_consumption: float, year: int, rooms: int):
        super().__init__(engine, chasis, model, gas_consumption, year)
        self.rooms = rooms


class Motorcycle(Vehicle):

    def __init__(self, name: str,  type_of_engine: str, potency: int, weight: int, engine: Engine, chasis: str, model: str, gas_consumption: float, year: int, type: str):
        super().__init__(engine, chasis, model, gas_consumption, year)
        self.type = type

# prompt: crea un menu en consola, donde se pueda relacionar el codigo anterior

def main():

    vehicles_ = []

    while True:
        print("1. Crear un coche")
        print("2. Crear un camión")
        print("3. Crear un yate")
        print("4. Crear una motocicleta")
        print("5. Salir")

        opcion = input("Elija una opción: ")

        if opcion == "1":
            nombre = input("Nombre del coche: ")
            tipo_motor = input("Tipo de motor: ")
            potencia = int(input("Potencia del motor: "))
            peso = int(input("Peso del coche: "))
            chasis = input("Chasis del coche: ")
            consumo = float(input("Ingresa consumo: "))
            modelo = input("Modelo del coche: ")
            año = int(input("Año de fabricación del coche: "))
            asientos = int(input("Número de asientos del coche: "))

            motor = Engine(nombre, tipo_motor, potencia, peso)
            coche = Car(motor, chasis, modelo, consumo, año, asientos)

            vehicles_.append({coche})

            print("Coche creado correctamente.")

        elif opcion == "2":
            nombre = input("Nombre del camión: ")
            tipo_motor = input("Tipo de motor: ")
            potencia = int(input("Potencia del motor: "))
            peso = int(input("Peso del camión: "))
            chasis = input("Chasis del camión: ")
            modelo = input("Modelo del camión: ")
            consumo = float(input("Consumo de gasolina del camión: "))
            año = int(input("Año de fabricación del camión: "))
            ejes = int(input("Número de ejes del camión: "))
            peso_maximo = int(input("Peso máximo del camión: "))

            motor = Engine(nombre, tipo_motor, potencia, peso)
            camion = Truck(motor, chasis, modelo, consumo, año, ejes, peso_maximo)

            print("Camión creado correctamente.")

        elif opcion == "3":
            nombre = input("Nombre del yate: ")
            tipo_motor = input("Tipo de motor: ")
            potencia = int(input("Potencia del motor: "))
            peso = int(input("Peso del yate: "))
            chasis = input("Chasis del yate: ")
            modelo = input("Modelo del yate: ")
            consumo = float(input("Consumo de gasolina del yate: "))
            año = int(input("Año de fabricación del yate: "))
            habitaciones = int(input("Número de habitaciones del yate: "))

            motor = Engine(nombre, tipo_motor, potencia, peso)
            yate = Yacht(motor, chasis, modelo, consumo, año, habitaciones)

            print("Yate creado correctamente.")

        elif opcion == "4":
            nombre = input("Nombre de la motocicleta: ")
            tipo_motor = input("Tipo de motor: ")
            potencia = int(input("Potencia del motor: "))
            peso = int(input("Peso de la motocicleta: "))
            chasis = input("Chasis de la motocicleta: ")
            modelo = input("Modelo de la motocicleta: ")
            consumo = float(input("Consumo de gasolina de la motocicleta: "))
            año = int(input("Año de fabricación de la motocicleta: "))
            tipo = input("Tipo de motocicleta: ")

            motor = Engine(nombre, tipo_motor, potencia, peso)
            motocicleta = Motorcycle(motor, chasis, modelo, consumo, año, tipo)

            print("Motocicleta creada correctamente.")

        elif opcion == "5":
            break

        else:
            print("Opción no válida.")


if __name__ == "__main__":
    main()